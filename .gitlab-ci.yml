stages:
  - build-env-default
  - build-env-full
  - build-and-test
  - compiler-warnings
  - package-env
  - package-build
  - package-build-dev
  - package-test
  - package-deploy

.execution-conditions: &execution-conditions
  only:
    refs:
      - /^release\/.*$/
      - merge_requests
      - master@nektar/nektar
      - tags@nektar/nektar
      - web
    changes:
      - "cmake/**/*"
      - "docker/**/*"
      - "docs/**/*"
      - "library/**/*"
      - "solvers/**/*"
      - "tests/**/*"
      - "utilities/**/*"
      - ".gitlab-ci/*"
      - .dockerignore
      - .gitmodules
      - .gitlab-ci.yml
      - CMakeLists.txt
    variables:
      - $CI_MERGE_REQUEST_TITLE !~ /^WIP:.*/

.build-env-template: &build-env-template
  <<: *execution-conditions
  stage: build-env
  image: docker:19.03.6
  timeout: 1h

.build-and-test-template: &build-and-test-template
  <<: *execution-conditions
  stage: build-and-test
  image: docker:19.03.6
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export CCACHE_DIR=/cache/nektar/$OS_VERSION/
    - export NUM_CPUS=4
    - export CONTAINER_NAME=test-$CI_JOB_ID
    - export ENV_NAME=env-${OS_VERSION}-${BUILD_TYPE}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$ENV_NAME
    - sed "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE:$ENV_NAME g" .gitlab-ci/Dockerfile_add_repo > Dockerfile_tmp
    - export ENV_IMAGE=$(docker build -q -f Dockerfile_tmp .)
    - mkdir -p log
    - docker run --name $CONTAINER_NAME -v ccache:/cache
      -e "BUILD_TYPE=$BUILD_TYPE"
      -e "NUM_CPUS=$NUM_CPUS"
      -e "CCACHE_DIR=$CCACHE_DIR"
      $ENV_IMAGE
      bash -x .gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log || true
    - exit_code=$(docker wait $CONTAINER_NAME)
    - >
        echo "Container exit code: $exit_code"
    - if [ $exit_code -ne 0 ];
      then
        export FAIL_IMAGE=$CI_REGISTRY_IMAGE:pipeline_${CI_PIPELINE_ID}_${OS_VERSION}_${BUILD_TYPE};
        echo FAIL $FAIL_IMAGE;
        docker commit $CONTAINER_NAME $FAIL_IMAGE;
        docker push $FAIL_IMAGE; 
        docker rmi $FAIL_IMAGE;
      fi
    - docker rm $CONTAINER_NAME
    - exit $exit_code;
  artifacts:
    expire_in: 1 month
    paths:
      - log/
  timeout: 3h

.compiler-warning-template: &compiler-warning-template
  <<: *execution-conditions
  image: debian:10-slim
  stage: compiler-warnings
  variables:
    WARNING_REGEX: '.*warning[: ].*'
    GIT_STRATEGY: none
  script:
    - export OS=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - export BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export LOG_FILE="log/${OS}_${BUILD_TYPE}.log"
    - if [ $(grep -c "$WARNING_REGEX" $LOG_FILE) -ne 0 ];
      then
      grep --colour=always -A 1 -B 1 -0 "$WARNING_REGEX" $LOG_FILE;
        exit 1;
      fi
  allow_failure: true
  timeout: 15m

################################################
###################  DEBIAN  ###################
################################################

.build-env-debian-template-default: &build-env-debian-template-default
  <<: *build-env-template
  stage: build-env-default
  variables:
    OS_DISTRO: debian
    REMOVE_UCX: 0
  script:
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - sed -e "s %%OS_VERSION%% $OS_VERSION g" -e "s %%REGISTRY%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_${OS_DISTRO}_${BUILD_TYPE} > Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export IMAGE=$CI_REGISTRY_IMAGE:env-${OS_VERSION}-${BUILD_TYPE}
    - docker pull $IMAGE || true
    - docker build --pull --build-arg REMOVE_UCX=${REMOVE_UCX} -t $IMAGE .
    - docker push $IMAGE

.build-env-debian-template-full: &build-env-debian-template-full
  <<: *build-env-debian-template-default
  stage: build-env-full

bullseye-default-build-env:
  <<: *build-env-debian-template-default

bullseye-full_py3-build-env:
  <<: *build-env-debian-template-full
  variables:
    OS_DISTRO: debian
    REMOVE_UCX: 1
  needs: ["bullseye-default-build-env"]

buster-default-build-env:
  <<: *build-env-debian-template-default

buster-full-build-env:
  <<: *build-env-debian-template-full
  needs: ["buster-default-build-env"]

stretch-default-build-env:
  <<: *build-env-debian-template-default

stretch-full-build-env:
  <<: *build-env-debian-template-full
  needs: ["stretch-default-build-env"]

bullseye-default-build-and-test:
  <<: *build-and-test-template
  needs: ["bullseye-default-build-env"]

bullseye-full_py3-build-and-test:
  <<: *build-and-test-template
  needs: ["bullseye-full_py3-build-env"]

buster-default-build-and-test:
  <<: *build-and-test-template
  needs: ["buster-default-build-env"]

buster-full-build-and-test:
  <<: *build-and-test-template
  needs: ["buster-full-build-env"]
  variables:
    OS_DISTRO: debian
    GIT_SUBMODULE_STRATEGY: recursive

stretch-default-build-and-test:
  <<: *build-and-test-template
  needs: ["stretch-default-build-env"]

stretch-full-build-and-test:
  <<: *build-and-test-template
  needs: ["stretch-full-build-env"]


# COMPILER WARNINGS
bullseye-default-warnings:
  <<: *compiler-warning-template
  needs: ["bullseye-default-build-and-test"]

bullseye-full_py3-warnings:
  <<: *compiler-warning-template
  needs: ["bullseye-full_py3-build-and-test"]

buster-default-warnings:
  <<: *compiler-warning-template
  needs: ["buster-default-build-and-test"]

buster-full-warnings:
  <<: *compiler-warning-template
  needs: ["buster-full-build-and-test"]

stretch-default-warnings:
  <<: *compiler-warning-template
  needs: ["stretch-default-build-and-test"]

stretch-full-warnings:
  <<: *compiler-warning-template
  needs: ["stretch-full-build-and-test"]


buster-documentation-build-env:
  <<: *execution-conditions
  image: docker:19.03.6
  stage: build-env-full
  script:
    - export IMAGE=$CI_REGISTRY_IMAGE:env-documentation
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - sed -e "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_debian_documentation > Dockerfile
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE
  needs: ["buster-default-build-env"]

.build-documentation-template: &build-documentation-template
  <<: *build-and-test-template
  image: $CI_REGISTRY_IMAGE:env-documentation
  needs: ["buster-documentation-build-env"]

user-guide-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build -j 4 user-guide-pdf user-guide-html developer-guide-pdf developer-guide-html
  artifacts:
    expire_in: 1 month
    paths:
      - build/docs/user-guide/user-guide.pdf
      - build/docs/user-guide/html
      - build/docs/developer-guide/developers-guide.pdf
      - build/docs/developer-guide/html

doxygen-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build doc
  artifacts:
    expire_in: 1 month
    paths:
      - build/docs/doxygen/html/

tutorials-build:
  <<: *build-documentation-template
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release .
    - make -C build -j 2 tutorials-pdf tutorials-html
  artifacts:
    expire_in: 1 month
    paths:
      - build/docs/tutorial/



################################################
###################  UBUNTU  ###################
################################################

.build-env-ubuntu-template-default: &build-env-ubuntu-template-default
  <<: *build-env-debian-template-default
  variables:
    OS_DISTRO: ubuntu

.build-env-ubuntu-template-full: &build-env-ubuntu-template-full
  <<: *build-env-ubuntu-template-default
  stage: build-env-full

bionic-default-build-env:
  <<: *build-env-ubuntu-template-default

bionic-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["bionic-default-build-env"]

xenial-default-build-env:
  <<: *build-env-ubuntu-template-default

xenial-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["xenial-default-build-env"]

trusty-default-build-env:
  <<: *build-env-ubuntu-template-default

trusty-full-build-env:
  <<: *build-env-ubuntu-template-full
  needs: ["trusty-default-build-env"]


bionic-default-build-and-test:
  <<: *build-and-test-template
  needs: ["bionic-default-build-env"]

bionic-full-build-and-test:
  <<: *build-and-test-template
  needs: ["bionic-full-build-env"]

xenial-default-build-and-test:
  <<: *build-and-test-template
  needs: ["xenial-default-build-env"]

xenial-full-build-and-test:
  <<: *build-and-test-template
  needs: ["xenial-full-build-env"]

trusty-default-build-and-test:
  <<: *build-and-test-template
  needs: ["trusty-default-build-env"]

trusty-full-build-and-test:
  <<: *build-and-test-template
  needs: ["trusty-full-build-env"]


# COMPILER WARNINGS
bionic-default-warnings:
  <<: *compiler-warning-template
  needs: ["bionic-default-build-and-test"]

bionic-full-warnings:
  <<: *compiler-warning-template
  needs: ["bionic-full-build-and-test"]

xenial-default-warnings:
  <<: *compiler-warning-template
  needs: ["xenial-default-build-and-test"]

xenial-full-warnings:
  <<: *compiler-warning-template
  needs: ["xenial-full-build-and-test"]

trusty-default-warnings:
  <<: *compiler-warning-template
  needs: ["trusty-default-build-and-test"]

trusty-full-warnings:
  <<: *compiler-warning-template
  needs: ["trusty-full-build-and-test"]


################################################
###################  CENTOS  ###################
################################################

.build-env-centos-template-default: &build-env-centos-template-default
  <<: *build-env-debian-template-default
  variables:
    OS_DISTRO: centos

.build-env-centos-template-full: &build-env-centos-template-full
  <<: *build-env-centos-template-default
  stage: build-env-full

centos7-default-build-env:
  <<: *build-env-centos-template-default

centos7-full-build-env:
  <<: *build-env-centos-template-full
  needs: ["centos7-default-build-env"]

centos7-default-build-and-test:
  <<: *build-and-test-template
  needs: ["centos7-default-build-env"]

centos7-full-build-and-test:
  <<: *build-and-test-template
  needs: ["centos7-full-build-env"]


# COMPILER WARNINGS
centos7-default-warnings:
  <<: *compiler-warning-template
  needs: ["centos7-default-build-and-test"]

centos7-full-warnings:
  <<: *compiler-warning-template
  needs: ["centos7-full-build-and-test"]


# ################################################
# ####################  OSX  #####################
# ################################################

.build-and-test-osx-template: &build-and-test-osx-template
  <<: *build-and-test-template
  tags:
    - macos
  script:
    - mkdir -p log
    - export OS_VERSION="osx"
    - export NUM_CPUS=8
    - bash -x ./.gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log


osx-default-build-and-test:
  <<: *build-and-test-osx-template
  variables:
    BUILD_TYPE: "default"
  needs: []

osx-full-build-and-test:
  <<: *build-and-test-osx-template
  variables:
    BUILD_TYPE: "full"
  needs: []


osx-default-warnings:
  <<: *compiler-warning-template
  needs: ["osx-default-build-and-test"]

osx-full-warnings:
  <<: *compiler-warning-template
  needs: ["osx-full-build-and-test"]


# ################################################
# #################  WINDOWS  ####################
# ################################################

win10-default-build-and-test:
  <<: *build-and-test-template
  tags:
    - win10
  script:
    - $Env:path = "$CI_PROJECT_DIR\build\dist\bin;$CI_PROJECT_DIR\ThirdParty;$CI_PROJECT_DIR\build\ThirdParty\dist\bin;" + $Env:path
    - echo $Env:path
    - mkdir build
    - cd build
    - cmake.exe -G "Visual Studio 14 2015 Win64" --config Debug ..
    - cmake.exe --build . --target ALL_BUILD --config Debug
    - cmake.exe --build . --target INSTALL --config Debug
    - ctest --output-on-failure -C Debug -j3
  after_script:
    - Remove-Item -Recurse -Force build
  needs: []

# ##################################################
# #################  DOCKERHUB  ####################
# ##################################################

# Docker Hub build template. We build images and push them into the gitlab
# container registry first; this way, we can test the images before they are
# deployed, modify images or test adjustments to the CI by using docker/*
# branches on gitlab, and test the images before they are deployed.
#
# Images are tagged with both :latest and the short SHA commit, so that the
# correct image version can be grabbed from the container registry.
.dockerhub_build_template: &dockerhub_build_template
  image: docker:stable
  only:
    - master@nektar/nektar
    - /^docker\/.*$/@nektar/nektar
    - tags@nektar/nektar
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - IMAGE=$CI_REGISTRY_IMAGE/${image_name}
    - docker pull $IMAGE || true
    - docker build ${args} --pull -t $IMAGE -f ${dockerfile} .
    - docker tag $IMAGE $IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $IMAGE $IMAGE:latest
    - docker push $IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $IMAGE:latest

# Docker Hub test template, which runs an image from the gitlab container
# registry on a particular SHA commit.
.dockerhub-test-template: &dockerhub_test_template
  image: ${CI_REGISTRY_IMAGE}/${image_name}:$CI_COMMIT_SHORT_SHA
  stage: package-test
  only:
    - master@nektar/nektar
    - /^docker\/.*$/@nektar/nektar
    - tags@nektar/nektar

# Docker Hub deployment template. Only builds for master or tags on the main
# Nektar repository. The strategy is to login to the container registry and pull
# an image onto the runner; we then tag the image as appropriate (with :latest
# and SHA commit, as well as the git tag if this happens to be a tagged commit),
# then push the image up to Docker Hub. Note that cleanup of images on the
# runners can be difficult if they are tagged multiple times, so we also perform
# a quick rmi to make sure we only keep the images from the registry.
.dockerhub-deploy-template: &dockerhub_deploy_template
  image: docker:stable
  stage: package-deploy
  only:
    - master@nektar/nektar
    - tags@nektar/nektar
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - CI_IMAGE=$CI_REGISTRY_IMAGE/${image_name}:$CI_COMMIT_SHORT_SHA
    - DH_IMAGE=${DOCKERIO_REGISTRY}/nektarpp/${image_name}
    - docker pull $CI_IMAGE
    - docker logout
    - docker login -u "$DOCKERIO_REGISTRY_USER" -p "$DOCKERIO_REGISTRY_PASSWORD" $DOCKERIO_REGISTRY
    - if [ ! -z $CI_COMMIT_TAG ]; then docker tag $CI_IMAGE $DH_IMAGE:$CI_COMMIT_TAG; docker push $DH_IMAGE:$CI_COMMIT_TAG; docker rmi $DH_IMAGE:$CI_COMMIT_TAG; fi
    - docker tag $CI_IMAGE $DH_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_IMAGE $DH_IMAGE:latest
    - docker push $DH_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DH_IMAGE:latest
    - docker rmi $DH_IMAGE:$CI_COMMIT_SHORT_SHA $DH_IMAGE:latest

# nektarpp/nektar-env image
dockerhub-build-env:
  <<: *dockerhub_build_template
  stage: package-env
  variables:
    image_name: nektar-env
    dockerfile: docker/nektar-env/Dockerfile

# nektarpp/nektar image
dockerhub-build-nektar:
  <<: *dockerhub_build_template
  stage: package-build
  needs: [ "dockerhub-build-env" ]
  variables:
    image_name: nektar
    dockerfile: docker/nektar/Dockerfile
    args: --build-arg ENV_IMAGE=$CI_REGISTRY_IMAGE/nektar-env:$CI_COMMIT_SHORT_SHA
    GIT_SUBMODULE_STRATEGY: normal

# nektarpp/nektar image
dockerhub-build-workbook:
  <<: *dockerhub_build_template
  stage: package-build
  needs: []
  variables:
    image_name: nektar-workbook
    dockerfile: docker/nektar-workbook/Dockerfile

# nektarpp/nektar-dev image
dockerhub-build-dev:
  <<: *dockerhub_build_template
  stage: package-build-dev
  needs: [ "dockerhub-build-nektar" ]
  variables:
    image_name: nektar-dev
    args: --build-arg ENV_IMAGE=$CI_REGISTRY_IMAGE/nektar-env:$CI_COMMIT_SHORT_SHA --build-arg NEKTAR_IMAGE=$CI_REGISTRY_IMAGE/nektar:$CI_COMMIT_SHORT_SHA
    dockerfile: docker/nektar-dev/Dockerfile

# Test the dockerhub images
dockerhub-test-nektar:
  <<: *dockerhub_test_template
  needs: [ "dockerhub-build-nektar" ]
  variables:
    image_name: nektar
  script:
    - mpirun -n 3 IncNavierStokesSolver $CI_PROJECT_DIR/solvers/IncNavierStokesSolver/Tests/ChanFlow_m3_par.xml

dockerhub-test-nektar-dev:
  <<: *dockerhub_test_template
  needs: [ "dockerhub-build-dev" ]
  variables:
    image_name: nektar-dev
  script:
    - cd $CI_PROJECT_DIR/templates/executable
    - ./test.sh /usr/local/lib64/nektar++/cmake 3

# Deployment
dockerhub-deploy-nektar:
  <<: *dockerhub_deploy_template
  variables:
    image_name: nektar
dockerhub-deploy-nektar-env:
  <<: *dockerhub_deploy_template
  variables:
    image_name: nektar-env
dockerhub-deploy-nektar-dev:
  <<: *dockerhub_deploy_template
  variables:
    image_name: nektar-dev
dockerhub-deploy-nektar-workbook:
  <<: *dockerhub_deploy_template
  variables:
    image_name: nektar-workbook

# ##################################################
# ###############  RPM PACKAGING  ##################
# ##################################################

.package-conditions: &package-conditions
  only:
    refs:
      - package/rpm@nektar/nektar

.package-env-build: &package-env-build
  <<: *package-conditions
  image: docker:stable
  stage: package-env
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - IMAGE=$CI_REGISTRY_IMAGE/${image_name}
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE -f ${dockerfile} .
    - docker push $IMAGE

.package-rpm-build: &package-rpm-build
  <<: *package-conditions
  image: $CI_REGISTRY_IMAGE/${image_name}
  stage: package-build
  tags:
    - tmptag
  script:
    - NEKVER=$(<VERSION)
    - STATUSCODE=$(curl --silent -o /dev/null --write-out "%{http_code}" https://xyloid.org/nektar-repo/versions/${version_file})
    - if [ $STATUSCODE -ne 200 ]; then echo "Failed to grab versions file"; exit 1; fi
    - curl -o ${version_file} https://xyloid.org/nektar-repo/versions/${version_file}
    - RPMRELEASE=$(python3 redhat/version-tracker.py ${version_file} nektar ${NEKVER})
    - mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
    - cp ${spec_file} ~/rpmbuild/SPECS/nektar.spec
    - git archive --format=tgz --prefix=nektar-v${NEKVER}/ -o ~/rpmbuild/SOURCES/nektar-v${NEKVER}.tar.gz HEAD
    - pushd ~/rpmbuild/SPECS/
    - rpmbuild -ba --define "_nektar_version ${NEKVER}" --define "_nektar_build_release ${RPMRELEASE}" nektar.spec
    - popd
    - mv /root/rpmbuild/RPMS ./RPMS
    - mv /root/rpmbuild/SRPMS ./SRPMS
  artifacts:
    paths:
      - ./RPMS/*/*.rpm
      - ./SRPMS/*.rpm
      - ${version_file}
    expire_in: 1 week

##
## Test the generated RPM packages: first, run the ADRSolver on a
## randomly-selected test. Then, install the development package and test
## compilation of the standalone executable.
##
.package-rpm-test: &package-rpm-test
  <<: *package-conditions
  image: ${image_name}
  stage: package-test
  script:
    - if [ "$needs_epel" -eq 1 ]; then yum install -y epel-release; fi
    - yum install -y environment-modules RPMS/x86_64/nektar++-openmpi-adr-solver-[1-9]*.rpm RPMS/x86_64/libnektar++-openmpi-[1-9]*.rpm
    - source /etc/profile.d/modules.sh
    - module load mpi
    - cp $CI_PROJECT_DIR/solvers/ADRSolver/Tests/ImDiffusion_m12.xml .
    - mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml
    - test_output=`mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml | grep "L 2 error" | awk '{print ($7 < 2e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on ADRSolver run"; exit 1; fi
    - yum install -y RPMS/x86_64/nektar++-openmpi-devel-*.rpm
    - cd $CI_PROJECT_DIR/templates/executable
    - ./test.sh /usr/lib64/openmpi/lib/nektar++/cmake 3

.package-rpm-deploy: &package-rpm-deploy
  <<: *package-conditions
  image: fedora:30
  stage: package-deploy
  tags:
    - package
    - rpm
  script:
    - RPM_LOC=/web/${RPM_LOCATION}
    - dnf install -y createrepo rpm-sign
    - echo "$RPM_DEPLOY_KEY" | base64 --decode | gpg --import
    - for f in RPMS/*/*.rpm SRPMS/*.rpm; do rpm -D '_gpg_name nektar-users@imperial.ac.uk' --addsign $f; done
    - mkdir -p $RPM_LOC/RPMS/x86_64 $RPM_LOC/SRPMS
    - cp RPMS/x86_64/*.rpm $RPM_LOC/RPMS/x86_64
    - cp SRPMS/*.rpm $RPM_LOC/SRPMS
    - mv *.json /web/versions
    - createrepo --update $RPM_LOC
    - gpg --batch --yes --detach-sign -u nektar-users@imperial.ac.uk --armor $RPM_LOC/repodata/repomd.xml

##
## CentOS 7
##
package-centos7-env:
  <<: *package-env-build
  variables:
    image_name: pkg/centos7
    dockerfile: docker/packaging/Dockerfile-centos7

package-centos7-build:
  <<: *package-rpm-build
  needs: ["package-centos7-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-centos7.spec
    image_name: pkg/centos7
    version_file: centos-7.json

package-centos7-test:
  <<: *package-rpm-test
  needs: ["package-centos7-build"]
  dependencies:
    - package-centos7-build
  variables:
    image_name: centos:7
    needs_epel: 1

package-centos7-deploy:
  <<: *package-rpm-deploy
  needs: ["package-centos7-build", "package-centos7-test"]
  dependencies:
    - package-centos7-build
  variables:
    RPM_LOCATION: centos/7

##
## Fedora 30
##
package-fedora30-env:
  <<: *package-env-build
  variables:
    image_name: pkg/fedora30
    dockerfile: docker/packaging/Dockerfile-fedora30

package-fedora30-build:
  <<: *package-rpm-build
  needs: ["package-fedora30-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-fedora.spec
    image_name: pkg/fedora30
    version_file: fedora-30.json

package-fedora30-test:
  <<: *package-rpm-test
  needs: ["package-fedora30-build"]
  dependencies:
    - package-fedora30-build
  variables:
    image_name: fedora:30

package-fedora30-deploy:
  <<: *package-rpm-deploy
  needs: ["package-fedora30-build", "package-fedora30-test"]
  dependencies:
    - package-fedora30-build
  variables:
    RPM_LOCATION: fedora/30

##
## Fedora 31
##
package-fedora31-env:
  <<: *package-env-build
  variables:
    image_name: pkg/fedora31
    dockerfile: docker/packaging/Dockerfile-fedora31

package-fedora31-build:
  <<: *package-rpm-build
  needs: ["package-fedora31-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-fedora.spec
    image_name: pkg/fedora31
    version_file: fedora-31.json

package-fedora31-test:
  <<: *package-rpm-test
  needs: ["package-fedora31-build"]
  dependencies:
    - package-fedora31-build
  variables:
    image_name: fedora:31

package-fedora31-deploy:
  <<: *package-rpm-deploy
  needs: ["package-fedora31-build", "package-fedora31-test"]
  dependencies:
    - package-fedora31-build
  variables:
    RPM_LOCATION: fedora/31
