///////////////////////////////////////////////////////////////////////////////
//
// File: StdDemoSupport.cpp
//
// For more information, please see: http://www.nektar.info
//
// The MIT License
//
// Copyright (c) 2006 Division of Applied Mathematics, Brown University (USA),
// Department of Aeronautics, Imperial College London (UK), and Scientific
// Computing and Imaging Institute, University of Utah (USA).
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Description: Demo for testing functionality of StdProject
//
///////////////////////////////////////////////////////////////////////////////

#ifndef DEMOS_STDREGIONS_STDDEMOSUPPORTNEW_HPP
#define DEMOS_STDREGIONS_STDDEMOSUPPORTNEW_HPP

#include <string>
#include <vector>

#include <StdRegions/StdPointExp.h>
#include <StdRegions/StdSegExp.h>
#include <StdRegions/StdTriExp.h>
#include <StdRegions/StdNodalTriExp.h>
#include <StdRegions/StdQuadExp.h>
#include <StdRegions/StdHexExp.h>
#include <StdRegions/StdPrismExp.h>
#include <StdRegions/StdNodalPrismExp.h>
#include <StdRegions/StdPyrExp.h>
#include <StdRegions/StdTetExp.h>
#include <StdRegions/StdNodalTetExp.h>
#include <LibUtilities/Polylib/Polylib.h>

#include <LibUtilities/Foundations/ManagerAccess.h>

#include <boost/program_options.hpp>
#include <boost/algorithm/string.hpp>
#include <LibUtilities/LinearAlgebra/Lapack.hpp>

using namespace std;
using namespace Nektar;
using namespace Nektar::LibUtilities;
using namespace Nektar::StdRegions;
namespace po = boost::program_options;

class DemoSupportNew
{
public:

  Array<OneD, Array<OneD, NekDouble> > testcoord3d; 
  Array<OneD, Array<OneD, NekDouble> > testcoord2dquad; 
  Array<OneD, Array<OneD, NekDouble> > testcoord2dtri; 
  Array<OneD, NekDouble > interioreval3d;
  Array<OneD, NekDouble > interioreval2dquad;
  Array<OneD, NekDouble > interioreval2dtri;
  Array<OneD, Array<OneD, NekDouble> > C;

  DemoSupportNew() : m_desc("Available options")
  {
    m_desc.add_options()
      ("help,h",
       "Produce this help message and list basis and shape types.")
      ("nodal,n",
       po::value<string>(&m_ntype),
       "Optional nodal type, autofills shape and basis choices.")
      ("shape,s",
       po::value<string>(&m_shape),
       "Region shape to project function on.")
      ("basis,b",
       po::value<vector<string>>(&m_basis)->multitoken(),
       "Basis type, separate by spaces for higher dimensions.")
      ("order,o",
       po::value<vector<int>>(&m_order)->multitoken()->required(),
       "Order of basis sets, separate by spaces for higher dimensions.")
      ("points,p",
       po::value<vector<int>>(&m_points)->multitoken()->required(),
       "Number of quadrature points, separate by spaces for "
       "higher dimensions.")
      ("iterGD,t",
       po::value<NekDouble>(&iterGD)->multitoken(),
       "tol of gradient descent.")
      ("secarg,i",
       po::value<NekDouble>(&secarg)->multitoken(),
       "max iters of gradient descent.")
      ("pointstype,P",
       po::value<vector<string>>(&m_pointstype)->multitoken(),
       "Optional points type, separate by spaces for higher dimensions.");
        
  }

  void ParseArguments(int argc, char *argv[])
  {
    try
      {
	po::store(po::parse_command_line(argc, argv, m_desc), m_vm);
	if (m_vm.count("help"))
	  {
	    cout << m_desc;
	    cout << endl << "All nodal types, -n [ --nodal ], are:" << endl;
	    for (int i = 22; i < SIZE_PointsType; ++i)
	      {
		cout << kPointsTypeStr[i] << endl;
	      };
	    cout << endl << "All shape types, -s [ --shape ], are:" << endl;
	    for (int i = 1; i < SIZE_ShapeType; ++i)
	      {
		cout << ShapeTypeMap[i] << endl;
	      };
	    cout << endl << "All basis types, -b [ --basis ], are:" << endl;
	    for (int i = 1; i < SIZE_BasisType; ++i)
	      {
		cout << BasisTypeMap[i] << endl;
	      };
	    cout << endl << "All points types, -P [ --pointstype ], are:"
		 << endl;
	    for (int i = 1; i < SIZE_PointsType; ++i)
	      {
		cout << kPointsTypeStr[i] << endl;
	      };
	    exit(0);
	  }
	po::notify(m_vm);
      }
    catch (const exception &e)
      {
	cerr << "Error: " << e.what() << endl << m_desc;
	exit(1);
      }
  }

  Array<OneD, Array<OneD, NekDouble> > formConf(NekDouble N)
  {
    int evalPts = N+1; //+1 for luck
    int i, j;       
    Nektar::Array<Nektar::OneD, Nektar::NekDouble> ab1(evalPts);
    Nektar::Array<Nektar::OneD, Nektar::NekDouble> ab2(evalPts);
    Polylib::RecCoeff(evalPts, &ab1[0], &ab2[0], -0.5, -0.5);
    // Form confederate matrix
  
    // a = 2*a
    // b = 2*b
    Vmath::Smul(ab1.size(), 2.0, ab1, 1, ab1, 1);
    Vmath::Smul(ab2.size(), 2.0, ab2, 1, ab2, 1);

    //  J = full(spdiags([[b(3:n);0.5;0] a(1:n) b(1:n)], -1:1, n, n));
    vector<vector<NekDouble> > J;//, Array<OneD, NekDouble>(N,0.0));
      
    vector<NekDouble> row(N);
    NekDouble tt = ab1[0];
    row[0] = tt;
    tt = ab2[1];
    row[1] = tt;
    J.push_back(row);
    for(i = 1; i < N-1; ++i)
      {
	vector<NekDouble> row(N,0.0);
	for(j = 1; j < N-1; ++j)
	  {
	    if( i == j)
	      {
		NekDouble t1 = ab1[i];
		NekDouble t2 = ab2[i+1];
		NekDouble t3 = ab2[i];
		row[j] = t1;
		row[j+1] = t2;
		row[j-1] = t3;
	      }
	  }
	J.push_back(row);
      }
      
    vector<NekDouble> rowN(N);
    tt = ab1[N-1];
    rowN[N-1] = tt;
    tt = ab2[N-1];
    rowN[N-2] = tt;
    J.push_back(rowN);
      
    //print J:
    
     for(int yy = 0; yy<J.size(); yy++)
      {
	for(int uu  = 0 ; uu<J[0].size(); uu++)
	  {
	    J[yy][uu] = J[yy][uu]/2;
	  }
      }
    Array<OneD, Array<OneD, NekDouble> > C(J.size());
    for(i = 0; i < J.size(); i++)
      {
	C[i] = Array<OneD, NekDouble>(J[i].size(),J[i].data());
      }
    return C;
  }


  StdExpansion *CreateStdExpansion()
  {
    vector<PointsType> ptype;
    if (m_vm.count("pointstype"))
      {
	for (auto &p : m_pointstype)
	  {
	    PointsType tmp = eNoPointsType;

	    // starts at nodal points
	    for (int i = 1; i < SIZE_PointsType; ++i)
	      {
		if (boost::iequals(kPointsTypeStr[i], p))
		  {
                        
		    tmp = static_cast<PointsType>(i);
		    break;
		  }
		ASSERTL0(i != SIZE_PointsType - 1,
			 "The points type '" + p + "' does not exist");
	      }

	    ptype.push_back(tmp);
	  }
      }


       
    // Convert string input argument to nodal type
    PointsType nodaltype = eNoPointsType;
    ShapeType stype = eNoShapeType;
    vector<BasisType> btype(3, eNoBasisType);
    if (m_vm.count("nodal"))
      {
	for (int i = 22; i < SIZE_PointsType; ++i) // starts at nodal points
	  {
	    if (boost::iequals(kPointsTypeStr[i], m_ntype))
	      {
		nodaltype = static_cast<PointsType>(i);
		break;
	      }
	    ASSERTL0(i != SIZE_PointsType - 1,
		     "The nodal type '" + m_ntype + "' does not exist");
	  }
	switch (nodaltype)
	  {
	  case eNodalTriElec:
	  case eNodalTriFekete:
	  case eNodalTriSPI:
	  case eNodalTriEvenlySpaced:
	    btype[0] = eOrtho_A;
	    btype[1] = eOrtho_B;
	    stype = eTriangle;
	    break;
	  case eNodalQuadElec:
	    btype[0] = eOrtho_A;
	    btype[1] = eOrtho_B;
	    stype = eQuadrilateral;
	    break;
	  case eNodalTetElec:
	  case eNodalTetSPI:
	  case eNodalTetEvenlySpaced:
	    btype[0] = eOrtho_A;
	    btype[1] = eOrtho_B;
	    btype[2] = eOrtho_C;
	    stype = eTetrahedron;
	    break;
	  case eNodalPrismElec:
	  case eNodalPrismSPI:
	  case eNodalPrismEvenlySpaced:
	    btype[0] = eOrtho_A;
	    btype[1] = eOrtho_A;
	    btype[2] = eOrtho_B;
	    stype = ePrism;
	    break;
	  case eNodalHexElec:
	    btype[0] = eOrtho_A;
	    btype[1] = eOrtho_A;
	    btype[2] = eOrtho_A;
	    stype = eHexahedron;
	    break;
	  default:
	    ASSERTL0(!nodaltype, ("The nodal type '" + m_ntype +
				  "' is invalid for StdProject."));
	    break;
	  }
      }

    //Convert string input argument to shape type
    if (stype == eNoShapeType)
      {
	for (int i = 1; i < SIZE_ShapeType; ++i)
	  {
	    if (boost::iequals(ShapeTypeMap[i], m_shape))
	      {
		stype = static_cast<ShapeType>(i);
		break;
	      }
	    ASSERTL0(i != SIZE_ShapeType - 1,
		     "The shape type '" + m_shape + "' does not exist");
	  }
      }
    // Check arguments supplied equals dimension
    const int dimension = (stype == ePoint) ? 1 : ShapeTypeDimMap[stype];
    ASSERTL0(m_order.size() == dimension,
	     "Number of orders supplied should match shape dimension");
    ASSERTL0(m_points.size() == dimension,
	     "Number of points supplied should match shape dimension");
    ASSERTL0(ptype.size() == dimension || ptype.size() == 0,
	     "Number of points types should match shape dimension if "
	     "supplied.");

    if (!m_vm.count("nodal"))
      {
	ASSERTL0(m_basis.size() == dimension,
		 "Number of bases supplied should match shape dimension");

	// Convert string input argument to basis types
	for (int i = 0; i < dimension; ++i)
	  {
	    for (int j = 1; j < SIZE_BasisType; ++j)
	      {
		if (boost::iequals(BasisTypeMap[j], m_basis[i]))
		  {
		    btype[i] = static_cast<BasisType>(j);
		    break;
		  }
		ASSERTL0(j != SIZE_BasisType - 1,
			 "Basis type '" + m_basis[i] + "' does not exist");
	      }
	  }
      }

    //check basis selection is permitted for chosen shape
    map<ShapeType, vector<vector<BasisType>>> allowableBasis;
    allowableBasis[ePoint] = {
      {eOrtho_A, eModified_A, eFourier, eGLL_Lagrange, eGauss_Lagrange,
       eLegendre, eChebyshev, eMonomial, eFourierSingleMode,
       eFourierHalfModeRe, eFourierHalfModeIm}
    };
    allowableBasis[eSegment] = { allowableBasis[ePoint][0] };
    allowableBasis[eTriangle] = {
      {eOrtho_A, eModified_A, eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_B, eModified_B, eGLL_Lagrange, eGauss_Lagrange}
    };
    allowableBasis[eQuadrilateral] = {
      allowableBasis[eSegment][0], allowableBasis[eSegment][0]
    };
    allowableBasis[eTetrahedron] = {
      {eOrtho_A, eModified_A, eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_B, eModified_B, eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_C, eModified_C, eGLL_Lagrange, eGauss_Lagrange}
    };
    allowableBasis[ePyramid] = {
      {eOrtho_A,    eModified_A,    eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_A,    eModified_A,    eGLL_Lagrange, eGauss_Lagrange},
      {eOrthoPyr_C, eModifiedPyr_C, eGLL_Lagrange, eGauss_Lagrange}
    };
    allowableBasis[ePrism] = {
      {eOrtho_A, eModified_A, eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_A, eModified_A, eGLL_Lagrange, eGauss_Lagrange},
      {eOrtho_B, eModified_B, eGLL_Lagrange, eGauss_Lagrange}
    };
    allowableBasis[eHexahedron] = {
      {eOrtho_A, eModified_A, eFourier, eGLL_Lagrange, eGauss_Lagrange,
       eLegendre, eChebyshev, eMonomial},
      {eOrtho_A, eModified_A, eFourier, eGLL_Lagrange, eGauss_Lagrange,
       eLegendre, eChebyshev, eMonomial},
      {eOrtho_A, eModified_A, eFourier, eGLL_Lagrange, eGauss_Lagrange,
       eLegendre, eChebyshev, eMonomial}
    };


    for (int i = 0; i < dimension; ++i)
      {
	const unsigned int basisListLength = allowableBasis[stype][i].size();
	for (int j = 0; j < basisListLength; ++j)
	  {
	    if (allowableBasis[stype][i][j] == btype[i])
	      {
		break;
	      }
	    ASSERTL0(j != basisListLength - 1,
		     ("The basis type '" +
		      static_cast<string>(BasisTypeMap[btype[i]]) +
		      "' is invalid for basis argument " + to_string(i + 1) +
		      " for shape '" + ShapeTypeMap[stype] + "'."))
	      }
      }
    //Declaration of other variables needed
    StdExpansion *E = nullptr;

    // Assign points type according to basis type selection, if not already
    // assigned.
    if (ptype.size() == 0)
      {
	ptype.resize(dimension);
	for (int i = 0; i < dimension; ++i)
	  {
	    if (btype[i] == eFourier)
	      {
		ptype[i] = eFourierEvenlySpaced;
	      }
	    else if (btype[i] == eFourierSingleMode ||
		     btype[i] == eFourierHalfModeRe ||
		     btype[i] == eFourierHalfModeIm)
	      {
		ptype[i] = eFourierSingleModeSpaced;
	      }
	    else
	      {
		if (i == 1 && (stype == eTriangle || stype == eTetrahedron))
		  {
		    ptype[i] = eGaussRadauMAlpha1Beta0;
		  }
		else if (i == 2 && (stype == eTetrahedron || stype == ePyramid))
		  {
		    ptype[i] = eGaussRadauMAlpha2Beta0;
		  }
		else if (i == 2 && stype == ePrism)
		  {
		    ptype[i] = eGaussRadauMAlpha1Beta0;
		  }
		else
		  {
		    ptype[i] = eGaussLobattoLegendre;
		  }
	      }
	  }
      }

    if(m_pkey.size() == 0 && m_bkey.size() == 0)
      {
	for (int i = 0; i < dimension; ++i)
	  {
	    m_pkey.emplace_back(PointsKey(m_points[i], ptype[i]));
	    m_bkey.emplace_back(BasisKey(btype[i], m_order[i], m_pkey[i]));
	  }
      }
       

    switch (stype)
      {
      case ePoint:
	{
	  E = new StdPointExp(m_bkey[0]);
	  break;
	}
      case eSegment:
	{
	  E = new StdSegExp(m_bkey[0]);
	  break;
	}
      case eTriangle:
	{
	  E = nodaltype != eNoPointsType ? new StdNodalTriExp(m_bkey[0],
							      m_bkey[1],
							      nodaltype)
	    : new StdTriExp(m_bkey[0], m_bkey[1]);
	  break;
	}
      case eQuadrilateral:
	{
	  E = new StdQuadExp(m_bkey[0], m_bkey[1]);
	  break;
	}
      case eTetrahedron:
	{
	  E = nodaltype != eNoPointsType ? new StdNodalTetExp(m_bkey[0],
							      m_bkey[1],
							      m_bkey[2],
							      nodaltype)
	    : new StdTetExp(m_bkey[0], m_bkey[1],
			    m_bkey[2]);
	  break;
	}
      case ePyramid:
	{
	  E = new StdPyrExp(m_bkey[0], m_bkey[1], m_bkey[2]);
	  break;
	}
      case ePrism:
	{
	  E = nodaltype != eNoPointsType ? new StdNodalPrismExp(m_bkey[0],
								m_bkey[1],
								m_bkey[2],
								nodaltype)
	    : new StdPrismExp(m_bkey[0], m_bkey[1],
			      m_bkey[2]);
	  break;
	}
      case eHexahedron:
	{
	  E = new StdHexExp(m_bkey[0], m_bkey[1], m_bkey[2]);
	  break;
	}
      default:
	break;
      }
    C = formConf((dimension)*pow(3*m_order[0]+1,2)); 
    return E;
  }

  po::options_description &GetOptions()
  {
    return m_desc;
  }

  po::variables_map &GetVariableMap()
  {
    return m_vm;
  }

  std::vector<string> &GetPointsType()
  {
    return m_pointstype;
  }

  vector<int> &GetPoints()
  {
    return m_points;
  }
  NekDouble &GetTol()
  {
    return iterGD;
  }
  NekDouble &GetMaxIter()
  {
    return secarg;
  }

  vector<PointsKey> &GetPointsKey()
  {
    return m_pkey;
  }

  vector<BasisKey>  &GetBasisKey()
  {
    return m_bkey;
  }

    
  vector< NekDouble> FindEigenval( vector<NekDouble> &uhatsdiff,
				   int N) 
  {    
    const unsigned int n = N-1;
    const int sz = (n)*(n);
    Array<OneD, NekDouble> CMdiff(sz,0.0);
        
    int sizemat = uhatsdiff.size();
    for(int k = 0; k < sizemat-2; k++)
      {
	CMdiff[(sizemat-1)*k+k+1] = 1.0;
      }    

    Vmath::Vcopy(uhatsdiff.size()-1, &uhatsdiff[0], 1, &CMdiff[sz-(sizemat-1)], 1);
    Vmath::Smul(uhatsdiff.size()-1, -1.0,  &CMdiff[sz-(sizemat-1)], 1, &CMdiff[sz-(sizemat-1)], 1);
        
    const Array<OneD, const double>& A = CMdiff;
    Array<OneD, NekDouble>  wr(n), wi(n);

    Nektar::FullMatrixFuncs::EigenSolve(n, A, wr, wi);
    vector<NekDouble>EIG_R;
    for(int k = 0; k < sizemat-1; k++)
      {
	if(abs(wi[k])<1e-7 && abs(wr[k])<=1.0)
	  {
	    EIG_R.push_back(wr[k]);
	  }
      }
    
    EIG_R.push_back(-1.0);
    EIG_R.push_back(1.0);


    return EIG_R;
  }



  Array<OneD, Array<OneD, NekDouble> > monomial_connection(int N)
  {

    double *a;
    double *b;

    Array<OneD, Array<OneD, NekDouble> > R(N);
    a = new double[N];
    b = new double[N];    


    // Initialize a and b to zero
    for(int i = 0; i < N; i++)
      {
	a[i] = 0.0;
	b[i] = 0.0;
      }
    
    // [a,b] = jacobi_recurrence(maxN+1, 0, 0);
    
    Polylib::RecCoeff(N, a, b, 0.0, 0.0);
    
    
    //     assert( (N >= numel(a)) && (N >= numel(b)) );

    //b = sqrt(b)
    transform(b, b+N, b, (double(*)(double)) sqrt);
    //b = 1./b
    Array<OneD, NekDouble> r(N, b);
    for(int i = 0; i<r.size(); i++)
      {
	r[i] = 1/r[i];
      }

    // local_leading_coeffs = cumprod(1./b);

    //r = cumprod(1./b) 
    partial_sum (r.begin(), r.end(), r.begin(), multiplies<double>());


    //Build the connection matrix for this dimension and then distribute it accordingly

    for(int i = 0; i<N; i++)
      {
	Array<OneD, NekDouble> row(N);
	for(int j = 0; j<N; j++)
	  {
	    if( i == j)
	      {
		row[i] = r[i];
	      }

	  }
	R[i] = row;

      }

    for(int i = 1; i<N; i++)
      {
	//"side" conditions (i.e. those w/o left/right boundary points)
	if(i<2)
	  {
	    R[i][0] = (1/b[i])*(-a[i-1]*R[i-1][0]);
	  }
	else
	  {
	    R[i][0] = (1/b[i])*(-a[i-1]*R[i-1][0] - b[i-1]*R[i-2][0]);
            
	    //All the rest are `vectorizable'
	    for(int j = 1; j<i-1; j++)
	      {
		R[i][j] = R[i-1][j-1] - a[i-1]*R[i-1][j] - b[i-1]*R[i-2][j];
		R[i][j] = R[i][j]/b[i];
	      }
            
	  }
      }

    return R;

  }

  void pq(
	  Array<OneD,NekDouble> uhats,
	  Array<OneD, Array<OneD,  NekDouble> > roots,
	  Array<OneD, NekDouble> V1,
	  Array<OneD,NekDouble> &pqevalxast,
	  Array<OneD,NekDouble> &fvals
	  )
  {
    int N = uhats.size();
    Array<OneD,NekDouble> w1(N);
  
    vector<NekDouble> Vsumsq;
    for(int i = 0; i < roots[0].size(); i++)
      {

	Vmath::Vmul(N, &V1[i], roots[0].size(), &uhats[0], 1, &w1[0], 1);
	fvals[i] = ( Vmath::Vsum(N, &w1[0], 1));
    
      }
    for( int i = 0; i < roots[0].size(); i++)
      {
	Vmath::Vmul(N, &V1[i], roots[0].size(), &V1[i], roots[0].size(), &w1[0], 1);

	Vsumsq.push_back(pow(Vmath::Vsum(N, &w1[0], 1),-0.5));
      }


    //    cts = vec_vec_dot(Vsumsq, ret);
    Vmath::Vmul(roots[0].size(), &Vsumsq[0], 1, &fvals[0], 1, &fvals[0], 1);
    
    if(pqevalxast.size() > 0)
      {
                   
	int minidx = Vmath::Imin(fvals.size(), &fvals[0], 1);
	pqevalxast[0] = fvals[minidx];
	for(int k = 0; k < pqevalxast.size()-1; k++)
	  {
	    pqevalxast[k+1] = roots[k][minidx];
	  }
      }

                   
  }

  void derpq(Array<OneD, NekDouble> &uhats, NekDouble &ret,  Array<OneD, NekDouble> Vxy, Array<OneD, NekDouble> Vxyd)
  {
    int N = uhats.size();
    Array<OneD, NekDouble> temp(N);
    
    //\sum(phi^2)
    
    Vmath::Vmul(N, Vxy, 1, Vxy, 1, temp, 1); 
    NekDouble tmp = Vmath::Vsum(N, temp, 1);

    //\sum(u*phi')
    Vmath::Vmul(N, uhats, 1,Vxyd, 1, temp, 1);
    NekDouble v1 = Vmath::Vsum(N, temp, 1);
  
    v1 = v1*( Vmath::Vsum(N, temp, 1))*pow(tmp, -0.5);
    //\sum(phi*phi')
    Vmath::Vmul(N, Vxy, 1,Vxyd, 1, temp, 1);
    NekDouble v2  = Vmath::Vsum(N, temp, 1);

    //\sum(u*phi)
    Vmath::Vmul(N, uhats, 1, Vxy, 1, temp, 1); 
    v2 = v2*Vmath::Vsum(N, temp, 1);
    //\sum(phi*phi)^(-3/2)
    v2 = v2*( pow(tmp,-1.5));

    ret = v1 - v2;
  } 

  
  //if flag = 0, call if not from optimizer
  //if flag = 1, call is from optimizer
  vector< vector< NekDouble> >  gradient_descent2Dquad(Array<OneD, NekDouble> &uhats, StdExpansion *E, Array<OneD, Array<OneD, NekDouble> > &testcoord2dquad, Array<OneD, NekDouble> &interioreval2dquad, int flag)
  {

    int dim = 2;
    Array<OneD, NekDouble> g(dim);
    double inf = numeric_limits<double>::infinity();
            

    Array<OneD,NekDouble> xnew(dim) ,x(dim);
    NekDouble gprev = inf; // use inf
    int idxgprev;
    Array<OneD, NekDouble> tmp(dim);
    Array<OneD, Array<OneD, NekDouble> > xarr(dim);
    vector< vector< NekDouble> > ret(dim);
    int sz;
    Array<OneD, Array<OneD, NekDouble > > tempeval(4);

    sz = testcoord2dquad[0].size();
    
    for(int i = 0; i < 4; i++)
      {
	tempeval[i] = Array<OneD, NekDouble>(E->GetNcoeffs());  
      }
    Array<OneD, NekDouble> nullarr(0);
    Array<OneD, NekDouble> temp2(sz);

    if(flag==0)
      {
	Array<OneD, NekDouble> temp(uhats.size());
 
	for(int k = 0; k < sz; k++)
	  {

	    Vmath::Vmul(uhats.size(), &interioreval2dquad[k], sz, &uhats[0], 1, &temp[0], 1);          
	    temp2[k] = Vmath::Vsum(temp.size(), temp, 1);
	  }

	gprev = Vmath::Vmin(temp2.size(), temp2, 1);	
	idxgprev = Vmath::Imin(sz, temp2, 1);        
            
      }
    else
      {
	pq(uhats, testcoord2dquad, interioreval2dquad, nullarr, temp2 );
	gprev = Vmath::Vmin(sz, temp2, 1);
	idxgprev = Vmath::Imin(sz, temp2, 1);
      }
    xnew[0] = testcoord2dquad[0][idxgprev];
    xnew[1] = testcoord2dquad[1][idxgprev];
    if(gprev < 0 && abs(gprev)>1e-10)
      {
	int n = 0;
	NekDouble epsl = 1.0;

	NekDouble stepsize = iterGD, iter = secarg;
	Array<OneD, Array<OneD, NekDouble> > xastaa(dim);

	Array<OneD, NekDouble> dereval(dim);
	Array<OneD, NekDouble> xsave(xnew.size());
	for(int k = 0; k < dim; k++)
	  xsave[k] = xnew[k];
	
	// loop for gradient descent 2D:
        
	bool res2;
        
	Array<OneD, NekDouble> temp1 (uhats.size());
	while(n < iter)
	  {
	    epsl = 0.0;
	    for(int p = 0; p < dim; p++)
	      {

		xastaa[p] = Array<OneD, NekDouble>(1,xnew[p]);
	      }   
           
	    E->PhysEvalBasisGrad(xastaa, tempeval[0], tempeval[1], tempeval[2], tempeval[3]);
	    // multiply tempeval by uhats to get g[p]
           
	    if(flag == 0) // from opt_needed
	      {
                
		for(int p = 0; p < dim; p++)
		  {
                 
		    Vmath::Vmul(uhats.size(), &tempeval[p+1][0], 1, &uhats[0], 1, &temp1[0], 1 );
		    g[p] = Vmath::Vsum(temp1.size(), temp1, 1);
    
		    epsl += abs(g[p]);
		  }
	      }
	    else
	      {
		for(int p = 0; p < dim; p++)
		  {

		    derpq(uhats, dereval[p], tempeval[0], tempeval[p+1]);
                 
		    g[p] = dereval[p];
		    epsl += abs(g[p]);
		  }
	      }
	    x[0] = xnew[0] - stepsize*(g[0]);
	    x[1] = xnew[1] - stepsize*(g[1]);


	    res2 = true;
	    for(int k = 0; k < dim; k++)
	      {   
	    	if(abs(x[k])-abs(xnew[k]) > 1e-8 || abs(x[k])>1)
	    	  {
	    	    res2 = res2 && false  ;
	    	  }
	      }
	    if(res2 == true)
	      {
		break;
	      }

	    if( ((std::isnan(epsl)) || (epsl <1e-10) || (epsl>1e3) || (res2))  && abs(x[0]) <=1.0 && abs(x[1])<=1.0  )
	      {
		break;
	      }
	    for(int p = 0; p < dim; p++)
	      {
		xnew[p] = x[p];
	      }            
            
	    n = n+1;
            
	  }
        
	// for(int k = 0; k < dim; k++)
	//   {
	//     if(abs(x[k]) >1.0)
	//       {
	// 	res2 = false;
	// 	break;
	//       }
	//   }   
	//check
	if((n < iter &&(!std::isnan(epsl))))
	  {
	    for(int p = 0; p < dim; p++)
	      {
		ret[p].push_back( (x[p]));
	      }
	  }
    
	else
	  {
	    for(int p = 0; p < dim; p++)
	      {
                
		ret[p].push_back(xsave[p]);
	      }
            
	  }

      }
    return ret;
    
  }
  
  



  //if flag = 0, call if not from optimizer
  //if flag = 1, call is from optimizer
  vector< vector< NekDouble> >  gradient_descent2Dtri(Array<OneD, NekDouble> &uhats, StdExpansion *E, Array<OneD, Array<OneD, NekDouble> > &testcoord2dtri, Array<OneD, NekDouble> &interioreval2dtri, int flag)
  {

    int dim = 2;
    Array<OneD, NekDouble> g(dim);
    double inf = numeric_limits<double>::infinity();
            

    Array<OneD,NekDouble> xnew(dim) ,x(dim);
    NekDouble gprev = inf; // use inf
    int idxgprev;
    Array<OneD, NekDouble> tmp(dim);
    Array<OneD, Array<OneD, NekDouble> > xarr(dim);
    vector< vector< NekDouble> > ret(dim);
    int sz;
    Array<OneD, Array<OneD, NekDouble > > tempeval(4);

    sz = testcoord2dtri[0].size();


    for(int i = 0; i < 4; i++)
      {
	tempeval[i] = Array<OneD, NekDouble>(E->GetNcoeffs());  
      }
    Array<OneD, NekDouble> nullarr(0);
    Array<OneD, NekDouble> temp2(sz);

    if(flag==0)
      {
	Array<OneD, NekDouble> temp(uhats.size());
	//	cout<<"\n gprev candidates:\n";
	for(int k = 0; k < sz; k++)
	  {

	    Vmath::Vmul(uhats.size(), &interioreval2dtri[k], sz, &uhats[0], 1, &temp[0], 1);          
	    temp2[k] = Vmath::Vsum(temp.size(), temp, 1);
	    //  cout<< temp2[k]<<" ";
	  }

	gprev = Vmath::Vmin(temp2.size(), temp2, 1);	
	idxgprev = Vmath::Imin(sz, temp2, 1);        
            
      }
    else
      {
	pq(uhats, testcoord2dtri, interioreval2dtri, nullarr, temp2 );
	gprev = Vmath::Vmin(sz, temp2, 1);
	idxgprev = Vmath::Imin(sz, temp2, 1);
      }
    xnew[0] = testcoord2dtri[0][idxgprev];
    xnew[1] = testcoord2dtri[1][idxgprev];
    //    cout<<"\n start: "<<xnew[0]<<" "<<xnew[1]<<" gprev ="<<gprev;
    
    if(gprev < 0 && abs(gprev)>1e-10)
      {
	int n = 0;
	NekDouble epsl = 1.0;

	NekDouble stepsize = iterGD, iter = secarg;
	Array<OneD, Array<OneD, NekDouble> > xastaa(dim);

	Array<OneD, NekDouble> dereval(dim);
	Array<OneD, NekDouble> xsave(xnew.size());
	for(int k = 0; k < dim; k++)
	  xsave[k] = xnew[k];
	
	// loop for gradient descent 2D:
        
	bool res, res2;//,  res3 = true;
        
	Array<OneD, NekDouble> temp1 (uhats.size());
	while(n < iter)
	  {
	    epsl = 0.0;
	    for(int p = 0; p < dim; p++)
	      {

		xastaa[p] = Array<OneD, NekDouble>(1,xnew[p]);
	      }   
           
	    E->PhysEvalBasisGrad(xastaa, tempeval[0], tempeval[1], tempeval[2], tempeval[3]);
	    // multiply tempeval by uhats to get g[p]
           
	    if(flag == 0) // from opt_needed
	      {
                
		for(int p = 0; p < dim; p++)
		  {
                 
		    Vmath::Vmul(uhats.size(), &tempeval[p+1][0], 1, &uhats[0], 1, &temp1[0], 1 );
		    g[p] = Vmath::Vsum(temp1.size(), temp1, 1);
    
		    epsl += abs(g[p]);
		  }
	      }
	    else
	      {
		for(int p = 0; p < dim; p++)
		  {

		    derpq(uhats, dereval[p], tempeval[0], tempeval[p+1]);
                 
		    g[p] = dereval[p];
		    epsl += abs(g[p]);
		  }
	      }
	    x[0] = xnew[0] - stepsize*(g[0]);
	    x[1] = xnew[1] - stepsize*(g[1]);
	    //	    cout<<"\n at iter n = "<<n<<" abs(x[0])-abs(xnew[0]) = "<<abs(x[0])-abs(xnew[0])<<" abs(x[1])-abs(xnew[1])="<<abs(x[1])-abs(xnew[1])<<" g[0] = "<<g[0]<<" g[1]="<<g[1]<<" epsl = "<<epsl<<" x[0] = "<<x[0]<<" x[1] = "<<x[1] <<" xnew[0] = "<<xnew[0]<<" xnew[1] = "<<xnew[1] <<"\n";;;

	    	    res2 = true;
	    for(int k = 0; k < dim; k++)
	      {   
	    	if(abs(x[k])-abs(xnew[k]) > 1e-8 || abs(x[k])>1)
	    	  {
	    	    res2 = res2 && false  ;
	    	  }
	      }
	    if(res2 == true)
	      {
		break;
	      }
	    //	    res3 = false;
	    res = true;
	    res = (x[0]+x[1])<=0;
	    //	    cout<<" std::isnan(epsl) = "<<std::isnan(epsl)<<" epsl="<<epsl<<" res = "<<res<<"res2 = "<<res2<<" (x[0] = "<<(x[0])<<" (x[1])="<<(x[1])<<" g[0] = "<<g[0]<<" g[1] = "<<g[1]<<" stepsize = "<<stepsize<<" xnew[0] = "<<xnew[0]<<" xnew[1] = "<<xnew[1]<<"\n";
	
	    if( ((std::isnan(epsl)) || (epsl <1e-10)  ) && (res) && res2 &&abs(x[0]) <=1.0 && abs(x[1])<=1.0  )
	      {
		//		cout<<" abs(x[0] = "<<abs(x[0])<<" abs(x[1]) ="<<abs(x[1] )<<"\n";
		break;
	      }
	    for(int p = 0; p < dim; p++)
	      {
		xnew[p] = x[p];
	      }            
            
	    n = n+1;
            
	  }
        //n	cout<<"\n n = "<<n<<" ";	
	res = true;
	res = (x[0]+x[1])<=0;
                    
	// for(int k = 0; k < dim; k++)
	//   {
	//     if(abs(x[k]) >1.0)
	//       {
	// 	res2 = false;
	// 	break;
	//       }
	//   }   
	//check
	if((  res && n < iter &&(!std::isnan(epsl))))
	  {
	    for(int p = 0; p < dim; p++)
	      {
		ret[p].push_back( (x[p]));
	      }
	  }
    
	else
	  {
	    for(int p = 0; p < dim; p++)
	      {
                
		ret[p].push_back(xsave[p]);
	      }
            
	  }

      }
    return ret;
  }
  
  //if flag = 0, call if not from optimizer
  //if flag = 1, call is from optimizer
  vector< vector< NekDouble> >  gradient_descent3D(Array<OneD, NekDouble> &uhats, StdExpansion *E, Array<OneD, Array<OneD, NekDouble> > &testcoord3d, Array<OneD, NekDouble> &interioreval3d, int flag)
  {
    int dim = 3;
    Array<OneD, NekDouble> g(dim);
    double inf = numeric_limits<double>::infinity();
        
        
    Array<OneD,NekDouble> xnew(dim) ,x(dim);
    NekDouble gprev = inf; // use inf
    int idxgprev;
    Array<OneD, NekDouble> tmp(dim);
    Array<OneD, Array<OneD, NekDouble> > xarr(dim);
    vector< vector< NekDouble> > ret(dim);
    int sz = testcoord3d[0].size();
    Array<OneD, Array<OneD, NekDouble > > tempeval(4);

    for(int i = 0; i < 4; i++)
      {
	tempeval[i] = Array<OneD, NekDouble>(E->GetNcoeffs());  
      }
        
    Array<OneD, NekDouble> nullarr(0);
    Array<OneD, NekDouble> temp2(sz);
        
    if(flag==0)
      {
            
	Array<OneD, NekDouble> temp(uhats.size());
            
	for(int k = 0; k < sz; k++)
	  {
                
	    Vmath::Vmul(uhats.size(), &interioreval3d[k], sz, &uhats[0], 1, &temp[0], 1);          
	    temp2[k] = Vmath::Vsum(temp.size(), temp, 1);
	  }
            
	gprev = Vmath::Vmin(temp2.size(), temp2, 1);	
	idxgprev = Vmath::Imin(sz, temp2, 1);        
            
      }
    else
      {
	pq(uhats, testcoord3d, interioreval3d, nullarr, temp2 );
	gprev = Vmath::Vmin(sz, temp2, 1);
	idxgprev = Vmath::Imin(sz, temp2, 1);
      }
        
    xnew[0] = testcoord3d[0][idxgprev];
    xnew[1] = testcoord3d[1][idxgprev];
    xnew[2] = testcoord3d[2][idxgprev];
    if(gprev < 0 && abs(gprev)>1e-10)
      {
	int n = 0;
	NekDouble epsl = 1.0;

	NekDouble stepsize = iterGD, iter = secarg;
	Array<OneD, Array<OneD, NekDouble> > xastaa(dim);

	Array<OneD, NekDouble> dereval(dim);

	Array<OneD, NekDouble> xsave(xnew.size());
	for(int k = 0; k < dim; k++)
	  xsave[k] = xnew[k];
	// loop for gradient descent 2D:
            
	bool res2, res3 = true;
            
	Array<OneD, NekDouble> temp1 (uhats.size());
	while(n < iter)
	  {
	    epsl = 0.0;
	    for(int p = 0; p < dim; p++)
	      {
                    
		xastaa[p] = Array<OneD, NekDouble>(1,xnew[p]);
	      }   
                
	    E->PhysEvalBasisGrad(xastaa, tempeval[0], tempeval[1], tempeval[2], tempeval[3]);
	    // multiply tempeval by uhats to get g[p]
           
	    if(flag == 0) // from opt_needed
	      {
                    
		for(int p = 0; p < dim; p++)
		  {
                        
		    Vmath::Vmul(uhats.size(), &tempeval[p+1][0], 1, &uhats[0], 1, &temp1[0], 1 );
		    g[p] = Vmath::Vsum(temp1.size(), temp1, 1);
                        
		    epsl += abs(g[p]);
		  }
	      }
	    else
	      {
		for(int p = 0; p < dim; p++)
		  {
                            
		    derpq(uhats, dereval[p], tempeval[0], tempeval[p+1]);
                        
		    g[p] = dereval[p];
		    epsl += abs(g[p]);
		  }
	      }
	    x[0] = xnew[0] - stepsize*(g[0]);
	    x[1] = xnew[1] - stepsize*(g[1]);
	    x[2] = xnew[2] - stepsize*(g[2]);
	    res2 = true;
	    for(int k = 0; k < dim; k++)
	      {   
                    
		if(abs(x[k])-abs(xnew[k]) > 1e-8 || abs(x[k])>1)
		  {
		    res2 = res2 && false  ;
		    break;
		  }
	      }
            if(res2 == true)    
            {
                break;
            }
	    if(E->DetShapeType() == LibUtilities::ePrism)
	      {
		res3 = (x[0]+x[2])<=0;
	      }
	    else if(E->DetShapeType() == LibUtilities::ePyramid)
	      {
		res3 = (x[0]+x[2])<=0 &&  (x[1]+x[2])<=0;;

	      }
	    //if(prism)
	    //{
	    //check if x+z <= 0
	    //  res3 = (x[0]+x[2])<=0 ;   

	    //if(pyr)
	    //{
	    //check if x+z <= 0 and y+z<=0
	    //  res3 = (x[0]+x[2])<=0 ;   
                
	    if( ((std::isnan(epsl)) || (epsl <1e-10) || (epsl>1e3) ) && (res2) && (res3) && abs(x[0]) <=1.0 && abs(x[1])<=1.0 &&  abs(x[2])<=1.0  )
	      {
		break;
	      }
	    for(int p = 0; p < dim; p++)
	      {
		xnew[p] = x[p];
	      }            
                
	    n = n+1;
	  }
        
    
	//if(prism)
	//{
	//check if x+z <= 0
	//  res3 = (x[0]+x[2])<=0 ;   
	//}                        
	//if(pyr)
	//{
	//check if x+z <= 0 and y+z<=0
	//  res3 = (x[0]+x[2])<=0 ;   
        cout<<"\n n = "<<n<<" ";
	if(E->DetShapeType() == LibUtilities::ePrism)
	      {
		res3 = (x[0]+x[2])<=0;
	      }
	    else if(E->DetShapeType() == LibUtilities::ePyramid)
	      {
		res3 = (x[0]+x[2])<=0 &&  (x[1]+x[2])<=0;;

	      }
	    
	for(int k = 0; k < dim; k++)
	  {
	    if(abs(x[k]) >1.0)
	      {
		res2 = false;
		break;
	      }
	  }   
        cout<<" res3 = "<<res3<<" res2 = "<<res2;
	//check
	if((res3 && res2  && n < iter &&(!std::isnan(epsl))))
	  {
	    for(int p = 0; p < dim; p++)
	      {
		ret[p].push_back( (x[p]));
	      }
            cout<<" if ret="<<x[0]<<" "<<x[1] <<" "<<x[2]<<" ";
	  }
    
	else
	  {
	    for(int p = 0; p < dim; p++)
	      {
                
		ret[p].push_back(xsave[p]);
	      }

            cout<<"else  ret="<<xsave[0]<<" "<<xsave[1] <<" "<<xsave[2]<<" ";
            
	  }

    
      }

    return ret;
  }
    
  vector<vector<NekDouble> > find_roots(Array<OneD, NekDouble> &uhats, StdExpansion *E, int d ,int sig, int surfflag, int volflag, int surfid)
  {
    int dimension; 
    if(surfflag == 0 && volflag == 0)
      dimension = 1;
    else if(volflag == 0)
      dimension = 2;
    else
      dimension = 3;
    vector<vector< NekDouble> > ret(dimension);
    //Confederate matrix approach
    if(surfflag == 0 && volflag == 0)
      {
        int N = uhats.size();

        vector<NekDouble> uhatsmon;
        while(abs(uhats[N-1])<1e-8)
	  {
            N = N-1;
            
            if(N == 0)
	      {
        
                ret[0].push_back(-1.0);
                ret[0].push_back(1.0);
                
                return ret;
	      }

	  }
	
        vector<NekDouble> temp(N);
        // convert uhats to monomial, find roots of uhats or der of uhats
        for(int k = 0; k < N; k++)
	  {
            for(int jj= 0 ; jj < N; jj++)
	      {
                temp[jj ] = C[jj][k];
	      }
            Vmath::Vmul(N, &temp[0], 1,  &uhats[0], 1, &temp[0], 1);
            NekDouble temp2 = Vmath::Vsum(N, &temp[0], 1);
            uhatsmon.push_back(temp2);
	  }

        if(abs(Vmath::Vmax(uhatsmon.size(), &uhatsmon[0], 1))<1e-10)
	  {
            ret[0].push_back(-1.0);
            ret[0].push_back(1.0);
            
            return ret;
         
	  }
	
        // truncate trailing zeros
        while(abs(uhatsmon[N-1])<1e-8)
	  {
            N = N-1;
            if(N == 0)
	      {
       
                ret[0].push_back(-1.0);
                ret[0].push_back(1.0);
                
                return ret;
	      }

	  }
        //N = uhatsmon.size();

        // if(N == 0 || Vmath::Vmin(N,&uhatsmon[0],1)<-1e10)
	//   {
        //     ret[0].push_back(-1.0);
        //     ret[0].push_back(1.0);
        //     return ret;
	//   }
        // now size of uhatsmon = N;
        vector<NekDouble> uhatsdiff;
        // if d == 1,

        if(d == 1)
	  {
            for(int k = 1; k < N; k++)
	      {
                uhatsdiff.push_back(k*uhatsmon[k]);
	      }
            N = N-1;
            if(N == 0)
	      {
                ret[0].push_back(-1.0);
                ret[0].push_back(1.0);
                
                return ret;
	      }
        
	  }
        else //d == 0
	  {
            for(int k = 0; k<N; k++)
	      uhatsdiff.push_back(uhatsmon[k]);
	  }
        
        if(N == 1)
	  {
            ret[0].push_back(-1.0);
            ret[0].push_back(1.0);
                
            return ret;
	  }
        
        Vmath::Smul(N, 1.0/uhatsdiff[N-1], &uhatsdiff[0], 1, &uhatsdiff[0], 1);

        vector<NekDouble> EIG_R = FindEigenval(uhatsdiff, N);


        for(int kk = 0; kk <EIG_R.size(); kk++)
	  {   
            ret[0].push_back( EIG_R[kk] );
            
	  }


      }
    else if(dimension > 1 && surfflag == 1 && volflag == 0 )
      {
	
	if(surfid == 0)
	  ret = gradient_descent2Dquad(uhats, E, testcoord2dquad, interioreval2dquad, sig);
	else
	  ret = gradient_descent2Dtri(uhats, E, testcoord2dtri, interioreval2dtri, sig);
      }
    else if(volflag == 1)
      {
	ret = gradient_descent3D(uhats, E, testcoord3d, interioreval3d, sig);
      }


    return ret;    
    
  }
 
            


  Array<OneD, Array<OneD, NekDouble>> GetCoords(StdExpansion *E)
  {
    int dimension = E->GetShapeDimension();
    const auto totPoints = (unsigned) E->GetTotPoints();
    Array<OneD, NekDouble> x(totPoints), y(totPoints), z(totPoints);
    Array<OneD, Array<OneD, NekDouble> > coords(dimension);

    switch (dimension)
      {
      case 1:
	{
	  E->GetCoords(x);
	  coords[0] = x;
	  break;
	}

      case 2:
	{
	  E->GetCoords(x, y);
	  coords[0] = x;
	  coords[1] = y;
	  break;
	}

      case 3:
	{
	  E->GetCoords(x, y, z);
	  coords[0] = x;
	  coords[1] = y;
	  coords[2] = z;
	  break;
	}
      default:
	break;
      }

    return coords;
  }

protected:
  po::options_description m_desc;
  po::variables_map m_vm;
  vector<PointsKey> m_pkey;
  vector<BasisKey> m_bkey;
  NekDouble iterGD = 1e-3;
  NekDouble secarg = 1e3;
    
  std::string    m_shape;
  std::string    m_ntype;
  vector<string> m_basis{3, "NoBasisType"};
  vector<string> m_pointstype{3, "NoPointsType"};
  vector<int>    m_order;
  vector<int>    m_points;

};

#endif
