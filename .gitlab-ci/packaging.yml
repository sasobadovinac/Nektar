# ##################################################
# #################  PACKAGING  ####################
# ##################################################

.package-conditions: &package-conditions
  only:
    refs:
      - feature/pkg@ccantwel/nektar

.package-env-build: &package-env-build
  <<: *package-conditions
  image: docker:stable
  stage: package-env
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - IMAGE=$CI_REGISTRY_IMAGE/${image_name}
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE -f ${dockerfile} .
    - docker push $IMAGE

.package-deb-build: &package-deb-build
  <<: *package-conditions
  image: $CI_REGISTRY_IMAGE/${image_name}
  stage: package-build
  script:
    - OMPI_MCA_btl_vader_single_copy_mechanism=none
    - tar -czf nektar++-$(<VERSION).tar.gz 
                --transform="s,^,nektar++-$(<VERSION)/,S"
                --exclude-from=.gitlab-ci/packaging-exclude *
    - mkdir tmp
    - mv nektar++-$(<VERSION).tar.gz tmp/nektar++_$(<VERSION).orig.tar.gz
    - tar -C tmp -xf tmp/nektar++_$(<VERSION).orig.tar.gz
    - cp -a ${pkg_dir} tmp/nektar++-$(<VERSION)/debian
    - sed -e s/unstable/${distribution}/g < pkg/debian/changelog
            > tmp/nektar++-$(<VERSION)/debian/changelog
    - cd tmp/nektar++-$(<VERSION)
    - dpkg-source -b .
    - dpkg-buildpackage -us -uc
    - lintian
  artifacts:
    when: always
    paths:
     - tmp/*.deb
     - tmp/*.changes
     - tmp/*.debian.tar.xz
     - tmp/*.dsc
     - tmp/*.buildinfo
     - tmp/*.orig.tar.gz
    expire_in: 1 week

##
## Test the generated DEB packages: first, run the ADRSolver on a
## randomly-selected test. Then, install the development package and test
## compilation of the standalone executable.
##
.package-deb-test: &package-deb-test
  <<: *package-conditions
  image: ${image_name}
  stage: package-test
  script:
    - cd DEB && dpkg -i nektar++-adrsolver_[1-9]*.deb libnektar++_[1-9]*.deb
    - cp $CI_PROJECT_DIR/solvers/ADRSolver/Tests/ImDiffusion_m12.xml .
    - ADRSolver ImDiffusion_m12.xml
    - test_output=`ADRSolver ImDiffusion_m12.xml | grep "L 2 error" | awk '{print ($7 < 2e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on serial ADRSolver run"; exit 1; fi
    - mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml
    - test_output=`mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml | grep "L 2 error" | awk '{print ($7 < 2e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on parallel ADRSolver run"; exit 1; fi
    - cd DEB && dpkg -i libnektar++-dev_[1-9]*.deb
    - cd $CI_PROJECT_DIR/templates/executable
    - ./test.sh /usr/lib/nektar++/cmake 3 /usr/bin/cmake


.package-rpm-build: &package-rpm-build
  <<: *package-conditions
  image: $CI_REGISTRY_IMAGE/${image_name}
  stage: package-build
  tags:
    - tmptag
  script:
    - NEKVER=$(<VERSION)
    - STATUSCODE=$(curl --silent -o ${version_file} --write-out "%{http_code}" https://xyloid.org/nektar-repo/versions/${version_file})
    - if [ $STATUSCODE -eq 404 ]; then echo '{}' > ${version_file}; elif [ $STATUSCODE -ne 200 ]; then echo "Failed to grab versions file"; exit 1; fi
    - RPMRELEASE=$(python3 redhat/version-tracker.py ${version_file} nektar ${NEKVER})
    - mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
    - cp ${spec_file} ~/rpmbuild/SPECS/nektar.spec
    - git archive --format=tgz --prefix=nektar-v${NEKVER}/ -o ~/rpmbuild/SOURCES/nektar-v${NEKVER}.tar.gz HEAD
    - pushd ~/rpmbuild/SPECS/
    - rpmbuild -ba --define "_nektar_version ${NEKVER}" --define "_nektar_build_release ${RPMRELEASE}" nektar.spec
    - popd
    - mv /root/rpmbuild/RPMS ./RPMS
    - mv /root/rpmbuild/SRPMS ./SRPMS
  artifacts:
    paths:
      - ./RPMS/*/*.rpm
      - ./SRPMS/*.rpm
      - ${version_file}
    expire_in: 1 week

##
## Test the generated RPM packages: first, run the ADRSolver on a
## randomly-selected test. Then, install the development package and test
## compilation of the standalone executable.
##
.package-rpm-test: &package-rpm-test
  <<: *package-conditions
  image: ${image_name}
  stage: package-test
  script:
    - if [ "$needs_epel" -eq 1 ]; then yum install -y epel-release; fi
    - if [ "$needs_powertools" -eq 1 ]; then yum install -y dnf-plugins-core; yum config-manager --set-enabled PowerTools; fi
    - yum install -y environment-modules RPMS/x86_64/nektar++-openmpi-adr-solver-[1-9]*.rpm RPMS/x86_64/libnektar++-openmpi-[1-9]*.rpm RPMS/x86_64/nektar++-adr-solver-[1-9]*.rpm RPMS/x86_64/libnektar++-[1-9]*.rpm
    - cp $CI_PROJECT_DIR/solvers/ADRSolver/Tests/ImDiffusion_m12.xml .
    - ADRSolver ImDiffusion_m12.xml
    - test_output=`ADRSolver ImDiffusion_m12.xml | grep "L 2 error" | awk '{print ($7 < 2e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on serial ADRSolver run"; exit 1; fi
    - source /etc/profile.d/modules.sh
    - module load mpi
    - mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml
    - test_output=`mpirun --allow-run-as-root -n 3 ADRSolver ImDiffusion_m12.xml | grep "L 2 error" | awk '{print ($7 < 2e-7)}'`
    - if [ "$test_output" -eq 0 ]; then echo "Tolerance test failed on parallel ADRSolver run"; exit 1; fi
    - yum install -y RPMS/x86_64/nektar++-openmpi-devel-*.rpm
    - cd $CI_PROJECT_DIR/templates/executable
    - ./test.sh /usr/lib64/openmpi/lib/nektar++/cmake 3 ${cmake_exe}

.package-rpm-deploy: &package-rpm-deploy
  <<: *package-conditions
  image: fedora:30
  stage: package-deploy
  tags:
    - package
    - rpm
  script:
    - RPM_LOC=/web/${RPM_LOCATION}
    - dnf install -y createrepo rpm-sign
    - echo "$RPM_DEPLOY_KEY" | base64 --decode | gpg --import
    - for f in RPMS/*/*.rpm SRPMS/*.rpm; do rpm -D '_gpg_name nektar-users@imperial.ac.uk' --addsign $f; done
    - mkdir -p $RPM_LOC/RPMS/x86_64 $RPM_LOC/SRPMS
    - cp RPMS/x86_64/*.rpm $RPM_LOC/RPMS/x86_64
    - cp SRPMS/*.rpm $RPM_LOC/SRPMS
    - mv *.json /web/versions
    - createrepo --update $RPM_LOC
    - gpg --batch --yes --detach-sign -u nektar-users@imperial.ac.uk --armor $RPM_LOC/repodata/repomd.xml


##
## Debian sid
##
.package-debian-sid-env:
  <<: *package-env-build
  variables:
    image_name: pkg/debian-sid
    dockerfile: docker/packaging/Dockerfile-debian-sid

.package-debian-sid-build:
  <<: *package-deb-build
  needs: ["package-debian-sid-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/debian-sid
    pkg_dir: pkg/debian/sid
    distribution: unstable

##
## Debian bullseye
##
package-debian-bullseye-env:
  <<: *package-env-build
  variables:
    image_name: pkg/debian-bullseye
    dockerfile: docker/packaging/Dockerfile-debian-bullseye

package-debian-bullseye-build:
  <<: *package-deb-build
  needs: ["package-debian-bullseye-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/debian-bullseye
    pkg_dir: pkg/debian/bullseye
    distribution: bullseye

package-debian-bullseye-test:
  <<: *package-deb-test
  needs: ["package-debian-bullseye-build"]
  dependencies:
    - package-debian-bullseye-build
  variables:
    image_name: debian:bullseye

##
## Debian buster
##
package-debian-buster-env:
  <<: *package-env-build
  variables:
    image_name: pkg/debian-buster
    dockerfile: docker/packaging/Dockerfile-debian-buster

package-debian-buster-build:
  <<: *package-deb-build
  needs: ["package-debian-buster-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/debian-buster
    pkg_dir: pkg/debian/buster
    distribution: buster

##
## Debian stretch
##
package-debian-stretch-env:
  <<: *package-env-build
  variables:
    image_name: pkg/debian-stretch
    dockerfile: docker/packaging/Dockerfile-debian-stretch

package-debian-stretch-build:
  <<: *package-deb-build
  needs: ["package-debian-stretch-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/debian-stretch
    pkg_dir: pkg/debian/stretch
    distribution: stretch

##
## Ubuntu bionic
##
package-ubuntu-bionic-env:
  <<: *package-env-build
  variables:
    image_name: pkg/ubuntu-bionic
    dockerfile: docker/packaging/Dockerfile-ubuntu-bionic

package-ubuntu-bionic-build:
  <<: *package-deb-build
  needs: ["package-ubuntu-bionic-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/ubuntu-bionic
    pkg_dir: pkg/ubuntu/bionic
    distribution: bionic

##
## Ubuntu xenial
##
package-ubuntu-xenial-env:
  <<: *package-env-build
  variables:
    image_name: pkg/ubuntu-xenial
    dockerfile: docker/packaging/Dockerfile-ubuntu-xenial

package-ubuntu-xenial-build:
  <<: *package-deb-build
  needs: ["package-ubuntu-xenial-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    image_name: pkg/ubuntu-xenial
    pkg_dir: pkg/ubuntu/xenial
    distribution: xenial




##
## CentOS 7
##
.package-centos7-env:
  <<: *package-env-build
  variables:
    image_name: pkg/centos7
    dockerfile: docker/packaging/Dockerfile-centos7

.package-centos7-build:
  <<: *package-rpm-build
  needs: ["package-centos7-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-centos7.spec
    image_name: pkg/centos7
    version_file: centos-7.json

.package-centos7-test:
  <<: *package-rpm-test
  needs: ["package-centos7-build"]
  dependencies:
    - package-centos7-build
  variables:
    image_name: centos:7
    needs_epel: 1
    cmake_exe: cmake3

.package-centos7-deploy:
  <<: *package-rpm-deploy
  needs: ["package-centos7-build", "package-centos7-test"]
  dependencies:
    - package-centos7-build
  variables:
    RPM_LOCATION: centos/7

##
## CentOS 8
##
.package-centos8-env:
  <<: *package-env-build
  variables:
    image_name: pkg/centos8
    dockerfile: docker/packaging/Dockerfile-centos8

.package-centos8-build:
  <<: *package-rpm-build
  needs: ["package-centos8-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-centos8.spec
    image_name: pkg/centos8
    version_file: centos-8.json

.package-centos8-test:
  <<: *package-rpm-test
  needs: ["package-centos8-build"]
  dependencies:
    - package-centos8-build
  variables:
    image_name: centos:8
    needs_epel: 1
    needs_powertools: 1
    cmake_exe: cmake

.package-centos8-deploy:
  <<: *package-rpm-deploy
  needs: ["package-centos8-build", "package-centos8-test"]
  dependencies:
    - package-centos8-build
  variables:
    RPM_LOCATION: centos/8

##
## Fedora 30
##
.package-fedora30-env:
  <<: *package-env-build
  variables:
    image_name: pkg/fedora30
    dockerfile: docker/packaging/Dockerfile-fedora30

.package-fedora30-build:
  <<: *package-rpm-build
  needs: ["package-fedora30-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-fedora.spec
    image_name: pkg/fedora30
    version_file: fedora-30.json

.package-fedora30-test:
  <<: *package-rpm-test
  needs: ["package-fedora30-build"]
  dependencies:
    - package-fedora30-build
  variables:
    image_name: fedora:30
    cmake_exe: cmake

.package-fedora30-deploy:
  <<: *package-rpm-deploy
  needs: ["package-fedora30-build", "package-fedora30-test"]
  dependencies:
    - package-fedora30-build
  variables:
    RPM_LOCATION: fedora/30

##
## Fedora 31
##
.package-fedora31-env:
  <<: *package-env-build
  variables:
    image_name: pkg/fedora31
    dockerfile: docker/packaging/Dockerfile-fedora31

.package-fedora31-build:
  <<: *package-rpm-build
  needs: ["package-fedora31-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-fedora.spec
    image_name: pkg/fedora31
    version_file: fedora-31.json

.package-fedora31-test:
  <<: *package-rpm-test
  needs: ["package-fedora31-build"]
  dependencies:
    - package-fedora31-build
  variables:
    image_name: fedora:31
    cmake_exe: cmake

.package-fedora31-deploy:
  <<: *package-rpm-deploy
  needs: ["package-fedora31-build", "package-fedora31-test"]
  dependencies:
    - package-fedora31-build
  variables:
    RPM_LOCATION: fedora/31

##
## Fedora 32
##
.package-fedora32-env:
  <<: *package-env-build
  variables:
    image_name: pkg/fedora32
    dockerfile: docker/packaging/Dockerfile-fedora32

.package-fedora32-build:
  <<: *package-rpm-build
  needs: ["package-fedora32-env"]
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    spec_file: redhat/nektar-fedora.spec
    image_name: pkg/fedora32
    version_file: fedora-32.json

.package-fedora32-test:
  <<: *package-rpm-test
  needs: ["package-fedora32-build"]
  dependencies:
    - package-fedora32-build
  variables:
    image_name: fedora:32
    cmake_exe: cmake

.package-fedora32-deploy:
  <<: *package-rpm-deploy
  needs: ["package-fedora32-build", "package-fedora32-test"]
  dependencies:
    - package-fedora32-build
  variables:
    RPM_LOCATION: fedora/32

