<NEKTAR>

    <GEOMETRY DIM="2" SPACE="3">
        <VERTEX>
            <V ID="0"> 0.5 0.0 0.0 </V>
            <V ID="1"> 1.0 0.0 0.0 </V>
            <V ID="2"> 0.5 1.0 0.0 </V>
            <V ID="3"> 1.0 1.0 0.0 </V>
        </VERTEX>
        <EDGE>
            <E ID="0"> 0 1 </E>
            <E ID="1"> 1 3 </E>
            <E ID="2"> 3 2 </E>
            <E ID="3"> 2 0 </E>
        </EDGE>
        <ELEMENT>
            <Q ID="0"> 0 1 2 3 </Q>
        </ELEMENT>
        <COMPOSITE>
            <C ID="0"> E[0] </C>
            <C ID="1"> E[1,3] </C>
            <C ID="2"> E[2] </C>
            <C ID="3"> Q[0] </C>
        </COMPOSITE>
        <DOMAIN> C[3] </DOMAIN>
    </GEOMETRY>

    <EXPANSIONS>
        <E COMPOSITE="C[3]" NUMMODES="3" FIELDS="rho,rhou,rhov,rhow,E" TYPE="MODIFIED" />
    </EXPANSIONS>

    <CONDITIONS>

        <!--
            Forced vortex swirl with constant density.

            This test is intended to test the implementation of the axisymmetric forcing.

            The flow is aligned with the y-axis. The radial direction is the x-axis,
            and the circumferential direction is the z-axis. This is the convention
            used in the implementation of the axisymmetric forcing in Nektar++.

            The analytical solution for a forced vortex swirl with constant density is:

            rho = rho0
            u   = 0
            v   = v(x)
            w   = Omega * x
            p   = p0 + rho0/2 * Omega^2 * (x^2 - x0^2)

            Here, rho0 and p0 denote the density and pressure at the outer duct wall, v(x) is
            the radial velocity distribution (note that the flow is aligned with the y-axis), and
            Omega is a constant that determines the amount of swirl. It should be noted that
            v(x) can be chosen arbitrarily, but we chose it to be a constant.

            If we normalize the solution by the radius of the duct (x0), the density at the outer
            wall (rho0), and the speed of sound at the outer wall (c0), we get the non-dimensional
            solution that we solve for in this test:

            rho* = 1
            u*   = 0
            v*   = v*(x)
            w*   = (Omega*) * x*
            p*   = 1/gamma + Omega*^2/2 * (x*^2 - 1)

            Here, []* denotes a non-dimensional quantity, gamma = 1.4 is the ratio of specific heats,
            and Omega* = Omega * r0 / c0

            It is important to note that the analytical solution for a forced vortex swirl is a polynomial
            of degree 2. Therefore, with NUMMODES=3, we should get a solution which identically matches the
            analytical one (to floating points precision). Since we iniitliae the solution with the analytical
            solution, it should also note change. Therefore, 100 iterations is enough. If this test case
            fails with L2 and Linf errors anywhere above 1E-14, something in the code is broken.

        -->
        <PARAMETERS>
            <P> CFL             = 0.1                         </P>
            <P> NumSteps        = 100                         </P>
            <P> IO_CheckSteps   = 0                           </P>
            <P> IO_InfoSteps    = 1                           </P>
            <P> Gamma           = 1.4                         </P>
            <P> GasConstant     = 1. / Gamma                  </P>
            <P> uInf            = 0.0                         </P>
            <P> vInf            = 0.5                         </P>
            <P> Omega           = 0.2                         </P>
        </PARAMETERS>

        <SOLVERINFO>
            <I PROPERTY="EQType"                VALUE="EulerCFE"            />
            <I PROPERTY="Projection"            VALUE="DisContinuous"       />
            <I PROPERTY="AdvectionType"         VALUE="WeakDG"              />
            <I PROPERTY="TimeIntegrationMethod" VALUE="ClassicalRungeKutta4"/>
            <I PROPERTY="UpwindType"            VALUE="Roe"                 />
            <I PROPERTY="ProblemType"           VALUE="General"             />
        </SOLVERINFO>

        <VARIABLES>
            <V ID="0"> rho  </V>
            <V ID="1"> rhou </V>
            <V ID="2"> rhov </V>
            <V ID="3"> rhow </V>
            <V ID="4"> E    </V>
        </VARIABLES>

        <BOUNDARYREGIONS>
            <B ID="0"> C[0] </B>    <!-- Inlet  -->
            <B ID="1"> C[1] </B>    <!-- Walls -->
            <B ID="2"> C[2] </B>    <!-- Outlet -->
        </BOUNDARYREGIONS>

        <BOUNDARYCONDITIONS>
            <!-- Inlet -->
            <REGION REF="0">
                <D VAR="rho"  VALUE="1" />
                <D VAR="rhou" VALUE="0" />
                <D VAR="rhov" VALUE="vInf" />
                <D VAR="rhow" VALUE="Omega * x" />
                <D VAR="E"    VALUE="(1/Gamma + Omega^2 / 2 * (x^2 - 1))/(Gamma-1) + 0.5 * (vInf^2 + (Omega * x)^2)" />
            </REGION>
            <!-- Walls -->
            <REGION REF="1">
                <D VAR="rho"  VALUE="1" />
                <D VAR="rhou" VALUE="0" />
                <D VAR="rhov" VALUE="vInf" />
                <D VAR="rhow" VALUE="Omega * x" />
                <D VAR="E"    VALUE="(1/Gamma + Omega^2 / 2 * (x^2 - 1))/(Gamma-1) + 0.5 * (vInf^2 + (Omega * x)^2)" />
            </REGION>
            <!-- Outlet -->
            <REGION REF="2">
                <D VAR="rho"  USERDEFINEDTYPE="PressureOutflow" VALUE="0" />
                <D VAR="rhou" USERDEFINEDTYPE="PressureOutflow" VALUE="0" />
                <D VAR="rhov" USERDEFINEDTYPE="PressureOutflow" VALUE="0" />
                <D VAR="rhow" USERDEFINEDTYPE="PressureOutflow" VALUE="0" />
                <D VAR="E"    USERDEFINEDTYPE="PressureOutflow" VALUE="1/Gamma + Omega^2 / 2 * (x^2 - 1)" />
            </REGION>
        </BOUNDARYCONDITIONS>

        <FUNCTION NAME="InitialConditions">
            <E VAR="rho"  VALUE="1" />
            <E VAR="rhou" VALUE="0" />
            <E VAR="rhov" VALUE="vInf" />
            <E VAR="rhow" VALUE="Omega * x" />
            <E VAR="E"    VALUE="(1/Gamma + Omega^2 / 2 * (x^2 - 1))/(Gamma-1) + 0.5 * (vInf^2 + (Omega * x)^2)" />
        </FUNCTION>

        <FUNCTION NAME="ExactSolution">
            <E VAR="rho"  VALUE="1" />
            <E VAR="rhou" VALUE="0" />
            <E VAR="rhov" VALUE="vInf" />
            <E VAR="rhow" VALUE="Omega * x" />
            <E VAR="E"    VALUE="(1/Gamma + Omega^2 / 2 * (x^2 - 1))/(Gamma-1) + 0.5 * (vInf^2 + (Omega * x)^2)" />
        </FUNCTION>

    </CONDITIONS>

    <FORCING>
        <FORCE TYPE="AxiSymmetric">
        </FORCE>
    </FORCING>

</NEKTAR>
